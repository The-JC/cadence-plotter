import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.patches as patches
import pandas as pd
import numpy as np
from scipy.signal import find_peaks
import os

name_base = "OUT_f"
arrData = ["20G", "25G"]
arrStr =  {"20G": "20GHz", "25G": "25GHz"}

y_min = -100
y_max = 20
x_min = 1
x_max = 100


#Use to manually load latex path on IAS machines if not loaded earlier 
os.environ["PATH"] += os.pathsep + "/software/texlive/2023/bin/x86_64-linux"

#Import using pandas
df = pd.read_csv("./data/Interactive.386_OUT_f_20G_225G_25G.csv")

#Activate style
plt.style.use("./styles/presentation.mplstyle")

#Create axis (default is 1x1)
fig, ax = plt.subplots(2, 1)

xscale = 10**-9
xscale_suffix = 'G'

def plotDF(ax, x, y, label):
    ax.plot(x*xscale ,y, label=label)

def getData(df, base, str, ind):
    return df[r"%s %s %s" % (base, str, ind)].values

def plotWithSFDR(ax, x, y):
    #plot on axis (column names are generated by pandas)

    peakind = find_peaks(x, height=-30)[0]
    pksf=x[peakind]
    pksY=y[peakind]
    isorted = np.argsort(pksY)
    sfdrval = pksY[isorted[-1]] - pksY[isorted[-2]]

    pkfa = pksf[isorted[-1]]*xscale
    pkYa = pksY[isorted[-1]]
    pkfb = pksf[isorted[-2]]*xscale
    pkYb = pksY[isorted[-2]]
    # ax.fill_between((0,100),(pkYb,pkYb),(pkYa,pkYa), label = 'SFDR',
    #                      color = "lightblue") 

    ax.plot([pkfa, x_max], [pkYa, pkYa], c='black')
    ax.plot([pkfb, x_max], [pkYb, pkYb], c='black')
    ax.annotate('', xy=((pkfb*2+x_max)/3, pkYa), xycoords='data',
                xytext=((pkfb*2+x_max)/3, pkYb), textcoords='data',
                arrowprops=dict(arrowstyle="<->",
                                connectionstyle=patches.ConnectionStyle.Bar(armA=0.0, armB=0.0, fraction=0.0, angle=None),
                                #ec="k",
                                shrinkA=1, shrinkB=1)) 
    ax.annotate("SFDR %ddB" % (pkYa-pkYb), ((pkfb*2+x_max)/3+1, (pkYa+pkYb)/2), va='center', ha='left')

    ax.scatter(
        pksf*xscale,
        pksY,
        marker='x',
        c='r')

def minSFDR(ax, df, data_names):
    max_branchA = None
    max_branchB = None

    glb_pkfa = 0
    glb_pkYa = 0
    glb_pkfb = 0
    glb_pkYb = 0

    for strF in data_names:
        x = getData(df,name_base, strF, 'X')
        y = getData(df,name_base, strF, 'Y')
        peakind = find_peaks(y, height=-50)[0]
        pksf    = x[peakind]
        pksY    = y[peakind]
        isorted = np.argsort(pksY)
        sfdrval = pksY[isorted[-1]] - pksY[isorted[-2]]
        pkfa = pksf[isorted[-1]]*xscale
        pkYa = pksY[isorted[-1]]
        pkfb = pksf[isorted[-2]]*xscale
        pkYb = pksY[isorted[-2]]

        if max_branchA == None or pkYa > glb_pkYa:
            max_branchA = strF
            glb_pkfa = pkfa
            glb_pkYa = pkYa
        if max_branchB == None or pkYb > glb_pkYb:
            max_branchB = strF
            glb_pkfb = pkfb
            glb_pkYb = pkYb

    ax.plot([glb_pkfa, x_max], [glb_pkYa, glb_pkYa], c='black')
    ax.plot([glb_pkfb, x_max], [glb_pkYb, glb_pkYb], c='black')
    ax.annotate('', xy=((glb_pkfb*2+x_max)/3, glb_pkYa), xycoords='data',
                xytext=((glb_pkfb*2+x_max)/3, glb_pkYb), textcoords='data',
                arrowprops=dict(arrowstyle="<->",
                                connectionstyle=patches.ConnectionStyle.Bar(armA=0.0, armB=0.0, fraction=0.0, angle=None),
                                #ec="k",
                                shrinkA=1, shrinkB=1)) 
    ax.annotate("SFDR %ddB" % (glb_pkYa-glb_pkYb), ((glb_pkfb*2+x_max)/3+1, (glb_pkYa+glb_pkYb)/2), va='center', ha='left')

# ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.2f}'.format(x*10**9) + 'n'))

i=0
for strF in arrData:
    # x = getData(df,name_base, strF)
    plotDF(ax[i], getData(df,name_base, strF, 'X'), getData(df, name_base, strF, 'Y'), "%s" % (arrStr[strF]))

    minSFDR(ax[i], df, arrData)

    #Set axis labels
    ax[i].set_xlabel(r"Frequency [\si{%s\hertz}]" % (xscale_suffix))
    ax[i].set_ylabel(r"OUT [\si{\decibel}]")

    ax[i].set_ylim(y_min, y_max)
    ax[i].set_xlim(x_min, x_max)

    i+=1

#Show legend
# plt.legend(loc='upper center', ncol=3, bbox_to_anchor=(0.5, 1.15))

plt.savefig("./plots/frequency.svg")
plt.show()
