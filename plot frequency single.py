import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.patches as patches
import pandas as pd
import numpy as np
from scipy.signal import find_peaks
import os

# x_name = "OUT_f (Design_Point=1) X"
# y_name = "OUT_f (Design_Point=1) Y"
# x_name = "LO_f (Design_Point=1) X"
# y_name = "LO_f (Design_Point=1) Y"

# y_min = -100
# y_max = 20
# x_min = 10
# x_max = 40
# x_min = 0
# x_max = 25

plot_sfdr = False

def plotF(in_file, out_file, input_name, y_lim, x_lim, x_axis_name, xscale=1, xscale_suffix='', plot_sfdr=False, window_positon=100):
    (y_min, y_max) = y_lim
    (x_min, x_max) = x_lim
    x_name = r"%s X" % (input_name)
    y_name = r"%s Y" % (input_name)

    #Use to manually load latex path on IAS machines if not loaded earlier 
    os.environ["PATH"] += os.pathsep + "/software/texlive/2023/bin/x86_64-linux"

    #Import using pandas
    df = pd.read_csv(r"./data/%s" % (in_file))

    #Activate style
    plt.style.use("./styles/presentation.mplstyle")

    # fig = plt.figure()
    #Create axis (default is 1x1)
    fig = plt.figure(window_positon)
    ax = fig.add_subplot(1, 1, 1)

    #plot on axis (column names are generated by pandas)

    ax.plot((df[x_name].values)*xscale ,df[y_name].values)

    if plot_sfdr:
        peakind = find_peaks(df[y_name].values, height=-30)[0]
        pksf=df[x_name][peakind].values
        pksY=df[y_name][peakind].values
        isorted = np.argsort(pksY)
        sfdrval = pksY[isorted[-1]] - pksY[isorted[-2]]

        pkfa = pksf[isorted[-1]]*xscale
        pkYa = pksY[isorted[-1]]
        pkfb = pksf[isorted[-2]]*xscale
        pkYb = pksY[isorted[-2]]
        # ax.fill_between((0,100),(pkYb,pkYb),(pkYa,pkYa), label = 'SFDR',
        #                      color = "lightblue") 

        ax.plot([pkfa, x_max], [pkYa, pkYa], c='black')
        ax.plot([pkfb, x_max], [pkYb, pkYb], c='black')
        ax.annotate('', xy=((pkfb*2+x_max)/3, pkYa), xycoords='data',
                    xytext=((pkfb*2+x_max)/3, pkYb), textcoords='data',
                    arrowprops=dict(arrowstyle="<->",
                                    connectionstyle=patches.ConnectionStyle.Bar(armA=0.0, armB=0.0, fraction=0.0, angle=None),
                                    #ec="k",
                                    shrinkA=1, shrinkB=1)) 
        ax.annotate("SFDR %ddB" % (pkYa-pkYb), ((pkfb*2+x_max)/3+1, (pkYa+pkYb)/2), va='center', ha='left')

        pksf = np.array([pkfa, pkfb])
        pksY = np.array([pkYa, pkYb])
        ax.scatter(
            pksf,
            pksY,
            marker='x',
            c='r')

    # ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.2f}'.format(x*10**9) + 'n'))

    #Set axis labels
    ax.set_xlabel(r"Frequency [\si{%s\hertz}]" % (xscale_suffix))
    ax.set_ylabel(r"%s [\si{\decibel}]" % (x_axis_name))

    ax.set_ylim(y_min, y_max)
    ax.set_xlim(x_min, x_max)

    #Show legend
    # plt.legend(loc='upper center', ncol=2, bbox_to_anchor=(0.5, 1.15))

    plt.savefig(r"./plots/%s" % (out_file))
    # plt.savefig("./plots/spectrum_in_25G_460.svg")

if __name__ == '__main__':
    design_point = "460"
    plotF(
        r"Interactive.%s_IN_f.csv" % (design_point),
        r"spectrum_in_25G_%s.svg" % (design_point),
        "LO_f (Design_Point=1)",
        (-100, 20),
        (0, 25),
        'LO',
        10**-9, 'G', False, 1
        )


    plotF(
        r"Interactive.%s_OUT_f.csv" % (design_point),
        r"spectrum_out_25G_%s.svg" % (design_point),
        "OUT_f (Design_Point=1)",
        (-100, 20),
        (10, 40),
        'OUT',
        10**-9, 'G', False, 2
        )
    
    plt.show()